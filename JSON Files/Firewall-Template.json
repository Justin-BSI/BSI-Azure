{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "metadata": {
                "description": "This is the location/region for all resources that this virtual machine will use."
            }
        },
        "FireboxVMName": {
            "type": "string",
            "metadata": {
                "description": "This is the name of the virtual machine. The name cannot contain non-ASCII or special characters, must contain at least one alphabet, and must be between 1 and 15 characters."
            }
        },
        "userName": {
            "type": "string",
            "allowedValues": [
                "wgadmin"
            ],
            "defaultValue": "wgadmin",
            "metadata": {
                "description": "This is the username, which can be 'wgadmin' only for this virtual machine to run properly."
            }
        },
        "newOrExistingStorage": {
            "type": "string",
            "allowedValues": [
                "new",
                "existing"
            ],
            "defaultValue": "new",
            "metadata": {
                "description": "Select if this template needs a new Storage Account or will reference an existing Storage Account"
            }
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "This is the name of the storage account where you will store the boot diagnostic container."
            }
        },
        "storageResourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "This is the resource group of the above storage account."
            }
        },
        "storageAccountType": {
            "type": "string",
            "allowedValues": [
                "Standard_GRS",
                "Standard_LRS",
                "Standard_RAGRS"
            ],
            "defaultValue": "Standard_LRS",
            "metadata": {
                "description": "The SKU object of the storage type (Standard LRS or Premium LRS)."
            }
        },
        "vmSize": {
            "type": "string",
            "allowedValues": [
                "Standard_A1_v2",
                "Standard_A2_v2",
                "Standard_A4_v2",
                "Standard_A8_v2",
                "Standard_A2m_v2",
                "Standard_A4m_v2",
                "Standard_A8m_v2",
                "Standard_D2_v3",
                "Standard_D4_v3",
                "Standard_D8_v3",
                "Standard_D16_v3",
                "Standard_D2s_v3",
                "Standard_D4s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3",
                "Standard_D2_v4",
                "Standard_D4_v4",
                "Standard_D8_v4",
                "Standard_D16_v4",
                "Standard_D2s_v4",
                "Standard_D4s_v4",
                "Standard_D8s_v4",
                "Standard_D16s_v4",
                "Standard_F1",
                "Standard_F2",
                "Standard_F4",
                "Standard_F8",
                "Standard_F16",
                "Standard_F2s_v2",
                "Standard_F4s_v2",
                "Standard_F8s_v2",
                "Standard_F16s_v2"
            ],
            "metadata": {
                "description": "This is the size of the virtual machine. Please choose a VM size appropriate to the license that you have purchased."
            }
        },
        "newOrExistingVnet": {
            "allowedValues": [
                "new",
                "existing"
            ],
            "type": "string",
            "metadata": {
                "description": "Select if this template needs a new VNet or will reference an existing VNet"
            }
        },
        "vnetName": {
            "type": "string",
            "metadata": {
                "description": "Type the new or existing virtual network name"
            }
        },
        "vnetAddressPrefix": {
            "type": "array",
            "defaultValue": [
                "10.0.0.0/16"
            ],
            "metadata": {
                "description": "Virtual network address space in CIDR notation, example: 10.0.0.0/16"
            }
        },
        "vnetResourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "Name of the resource group for the existing virtual network"
            }
        },
        "subnet1Name": {
            "type": "string",
            "defaultValue": "External",
            "metadata": {
                "description": "Type the new or existing subnet name."
            }
        },
        "subnet1Prefix": {
            "type": "string",
            "metadata": {
                "description": "Subnet 1 Prefix in CIDR notation (if using public IP, this will be the 'WAN' or external port), example: 10.0.0.0/24"
            }
        },
        "FireboxIPEth0": {
            "type": "string",
            "metadata": {
                "description": "Static IP from subnet 1 for eth0 of the Firebox Cloud.  Remember Azure reserves the first 3 IPs in each subnet.  When using an exising vnet, verify that this address is not already assigned, example: 10.0.0.4"
            }
        },
        "subnet2Name": {
            "type": "string",
            "defaultValue": "Trusted",
            "metadata": {
                "description": "New or Existing subnet Name"
            }
        },
        "subnet2Prefix": {
            "type": "string",
            "metadata": {
                "description": "Subnet 2 Prefix in CIDR notation (if using public IP, this will be the 'WAN' or external port), example: 10.0.1.0/24"
            }
        },
        "FireboxIPEth1": {
            "type": "string",
            "metadata": {
                "description": "Static IP from subnet 1 for eth1 of the Firebox Cloud.  Remember Azure reserves the first 3 IPs in each subnet.  When using an exising vnet, verify that this address is not already assigned, example: 10.0.1.4"
            }
        },
        "networkSecurityGroup": {
            "type": "string",
            "allowedValues": [
                "None",
                "Management",
                "Allow"
            ],
            "defaultValue": "Allow",
            "metadata": {
                "description": "A network security group contains security rules that allow or deny inbound network traffic to, or outbound network traffic from, the virtual machine. To simplify management of security rules, it's recommended that you associate a network security group to individual subnets, rather than individual network interfaces within the subnet, whenever possible."
            }
        },
        "newOrExistingPublicIP": {
            "type": "string",
            "allowedValues": [
                "new",
                "existing"
            ],
            "defaultValue": "new",
            "metadata": {
                "description": "Select if this template needs a new Public IP or will reference an existing Public IP"
            }
        },
        "publicIPAddressName": {
            "type": "string",
            "metadata": {
                "description": "This is the name of the Public IP address object."
            }
        },
        "publicAddressType": {
            "type": "string",
            "allowedValues": [
                "Static",
                "Dynamic"
            ],
            "defaultValue": "Static",
            "metadata": {
                "description": "Set the Public IP address type. A dynamic IP address will change during VM reboot."
            }
        },
        "publicIPResourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "Name of the resource group for the existing virtual network"
            }
        },
        "publicIpSku": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "defaultValue": "Basic",
            "metadata": {
                "description": "A Public IPâ€™s SKU must match the SKU of the Load Balancer with which it is used."
            }
        },
        "dnsLabelPrefix": {
            "type": "string",
            "metadata": {
                "description": "This is the DNS Label for the Public IP. It must be all lowercase letters. It should match with the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$ or it will raise an error."
            }
        },
        "sshKeyData": {
            "type": "string",
            "metadata": {
                "description": "SSH rsa public key"
            }
        }
    },
    "variables": {
        "vmName": "[parameters('FireboxVMName')]",
        "AvailabilitySetName": "[concat(parameters('FireboxVMName'),'-AvailabilitySet-',uniquestring(deployment().name))]",
        "AvailabilitySetId": "[resourceId('Microsoft.Compute/availabilitySets', variables('AvailabilitySetName'))]",
        "subnet1ID": "[resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnet1Name'))]",
        "subnet2ID": "[resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnet2Name'))]",
        "nicNameEth0": "[concat(parameters('FireboxVMName'),'Eth0')]",
        "nicNameEth1": "[concat(parameters('FireboxVMName'),'Eth1')]",
        "FireboxIPEth0": "[parameters('FireboxIPEth0')]",
        "FireboxIPEth1": "[parameters('FireboxIPEth1')]",
        "networkSecurityGroup": "[parameters('networkSecurityGroup')]",
        "networkSecurityGroupName": "[concat('NSG-', variables('nicNameEth0'))]",
        "routeTable1Name": "[concat(parameters('FireboxVMName'), '-', parameters('subnet1Name'),'-routes')]",
        "routeTable2Name": "[concat(parameters('FireboxVMName'), '-', parameters('subnet2Name'),'-routes')]",
        "publicIPAddressName": "[parameters('publicIPAddressName')]",
        "publicIPAddressType": "[parameters('publicAddressType')]",
        "publicIPSku": "[parameters('publicIpSku')]",
        "sshKeyPath": "/home/wgadmin/.ssh/authorized_keys"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "name": "pid-0f43a02e-25a5-4318-a57f-b70334187807-partnercenter",
            "apiVersion": "2021-04-01",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('AvailabilitySetName')]",
            "apiVersion": "2022-03-01",
            "location": "[parameters('location')]",
            "properties": {
                "platformFaultDomainCount": 2,
                "platformUpdateDomainCount": 2
            },
            "sku": {
                "name": "Aligned"
            }
        },
        {
            "condition": "[equals(parameters('newOrExistingStorage'), 'new')]",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageAccountName')]",
            "apiVersion": "2021-09-01",
            "sku": {
                "name": "[parameters('storageAccountType')]"
            },
            "kind": "Storage",
            "location": "[parameters('location')]",
            "properties": {
                "supportsHttpsTrafficOnly": true
            }
        },
        {
            "type": "Microsoft.Network/routeTables",
            "name": "[variables('routeTable1Name')]",
            "apiVersion": "2021-08-01",
            "location": "[parameters('location')]",
            "properties": {
                "routes": [
                    {
                        "name": "[concat('to', '-', parameters('subnet2Name'))]",
                        "properties": {
                            "addressPrefix": "[parameters('subnet2Prefix')]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('FireboxIPEth0')]"
                        }
                    },
                    {
                        "name": "[concat('to', '-', parameters('subnet1Name'))]",
                        "properties": {
                            "addressPrefix": "[parameters('subnet1Prefix')]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('FireboxIPEth0')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/routeTables",
            "name": "[variables('routeTable2Name')]",
            "apiVersion": "2021-08-01",
            "location": "[parameters('location')]",
            "properties": {
                "routes": [
                    {
                        "name": "[concat('to', '-', parameters('subnet1Name'))]",
                        "properties": {
                            "addressPrefix": "[parameters('subnet1Prefix')]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('FireboxIPEth1')]"
                        }
                    },
                    {
                        "name": "to-Internet",
                        "properties": {
                            "addressPrefix": "0.0.0.0/0",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIPAddress": "[variables('FireboxIPEth1')]"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[equals(variables('networkSecurityGroup'), 'None')]",
            "name": "[concat(variables('networkSecurityGroupName'), 'None')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2021-08-01",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowAllInBound",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[equals(variables('networkSecurityGroup'), 'Management')]",
            "name": "[concat(variables('networkSecurityGroupName'), 'Management')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2021-08-01",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "Web_UI",
                        "properties": {
                            "priority": 1010,
                            "protocol": "TCP",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "8080"
                        }
                    },
                    {
                        "name": "CLI",
                        "properties": {
                            "priority": 1020,
                            "protocol": "TCP",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "4118"
                        }
                    },
                    {
                        "name": "WSM",
                        "properties": {
                            "priority": 1030,
                            "protocol": "TCP",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "4117"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[equals(variables('networkSecurityGroup'), 'Allow')]",
            "name": "[concat(variables('networkSecurityGroupName'), 'Allow')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2021-08-01",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowAllInBound",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[equals(parameters('newOrExistingVnet'), 'new')]",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('vnetName')]",
            "apiVersion": "2021-08-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceID('Microsoft.Network/routeTables', variables('routeTable1Name'))]",
                "[resourceID('Microsoft.Network/routeTables', variables('routeTable2Name'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": "[parameters('vnetAddressPrefix')]"
                },
                "subnets": [
                    {
                        "name": "[parameters('subnet1Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnet1Prefix')]",
                            "routeTable": {
                                "id": "[resourceId('Microsoft.Network/routeTables',variables('routeTable1Name'))]"
                            }
                        }
                    },
                    {
                        "name": "[parameters('subnet2Name')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnet2Prefix')]",
                            "routeTable": {
                                "id": "[resourceId('Microsoft.Network/routeTables',variables('routeTable2Name'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "condition": "[equals(parameters('newOrExistingPublicIP'), 'new')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "apiVersion": "2021-08-01",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[variables('publicIpSku')]"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "idleTimeoutInMinutes": 30,
                "dnsSettings": {
                    "domainNameLabel": "[parameters('dnsLabelPrefix')]"
                }
            }
        },
        {
            "condition": "[or(equals(variables('networkSecurityGroup'), 'Allow'), equals(variables('networkSecurityGroup'), 'Management'))]",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('nicNameEth0'), '-NSG')]",
            "apiVersion": "2021-08-01",
            "location": "[parameters('location')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('FireboxIPEth0')]",
                            "publicIPAddress": {
                                "id": "[resourceId(parameters('publicIPResourceGroupName'), 'Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnet1ID')]"
                            }
                        }
                    }
                ],
                "enableIPForwarding": true,
                "networkSecurityGroup": {
                    "id": "[resourceID('Microsoft.Network/networkSecurityGroups', concat(variables('networkSecurityGroupName'), variables('networkSecurityGroup')))]"
                }
            },
            "dependsOn": [
                "[resourceID('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
                "[resourceID('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
                "[resourceID('Microsoft.Network/networkSecurityGroups', concat(variables('networkSecurityGroupName'), variables('networkSecurityGroup')))]"
            ]
        },
        {
            "condition": "[equals(variables('networkSecurityGroup'), 'None')]",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicNameEth0')]",
            "apiVersion": "2021-08-01",
            "location": "[parameters('location')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('FireboxIPEth0')]",
                            "publicIPAddress": {
                                "id": "[resourceId(parameters('publicIPResourceGroupName'), 'Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnet1ID')]"
                            }
                        }
                    }
                ],
                "enableIPForwarding": true
            },
            "dependsOn": [
                "[resourceID('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
                "[resourceID('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicNameEth1')]",
            "apiVersion": "2021-08-01",
            "location": "[parameters('location')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('FireboxIPEth1')]",
                            "subnet": {
                                "id": "[variables('subnet2ID')]"
                            }
                        }
                    }
                ],
                "enableIPForwarding": true
            },
            "dependsOn": [
                "[resourceID('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
                "[resourceID('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "apiVersion": "2022-03-01",
            "location": "[parameters('location')]",
            "plan": {
                "name": "wgfireboxcloudvm",
                "publisher": "watchguard-technologies",
                "product": "vm-firebox-cloud"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "availabilitySet": {
                    "id": "[variables('AvailabilitySetId')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('userName')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[variables('sshKeyPath')]",
                                    "keyData": "[parameters('sshKeyData')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "watchguard-technologies",
                        "offer": "vm-firebox-cloud",
                        "sku": "wgfireboxcloudvm",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage",
                        "name": "[variables('vmName')]"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "properties": {
                                "primary": true
                            },
                            "id": "[if(or(contains(variables('networkSecurityGroup'), 'Management'), contains(variables('networkSecurityGroup'), 'Allow')), resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicNameEth0'), '-NSG')), resourceId('Microsoft.Network/networkInterfaces',variables('nicNameEth0')))]"
                        },
                        {
                            "properties": {
                                "primary": false
                            },
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicNameEth1'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId(parameters('storageResourceGroupName'), 'Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2021-09-01').primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[resourceID('Microsoft.Network/networkInterfaces', variables('nicNameEth0'))]",
                "[resourceID('Microsoft.Network/networkInterfaces', variables('nicNameEth1'))]",
                "[resourceID('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceID('Microsoft.Compute/availabilitySets', variables('AvailabilitySetName'))]"
            ]
        }
    ]
}